import base64
import datetime
from execute import execute_listing_query, execute_photo_query
from lookups import look_up_all_fields

PROPERTY_TYPES = [
    'BUSO',
    'COMI',
    'COND',
    'FARM',
    'MANU',
    'MULT'
    'MULT',
    'RENT',
    'RESI',
    'TSHR',
    'VACL',
]

AREAS = [
    'BE'
    'RYL'
    'BG'
    'PAT'
    'PALO'
    'CHEW'
    'WLP'
    'OAK'
    'WILB'
    'CPF'
    'BOI'
    'NAP'
    'LACS'
    'EPH'
    'CHEN'
    'MIS'
    'LIND'
    'PAL'
    'CPV'
    'SPL'
    'RSID'
    'NPRT'
    'PTT'
    'OTHE'
    'WAS'
    'KETF'
    'CENV'
    'CENT'
    'RAI'
    'WAWA'
    'RVW'
    'QUL'
    'LYN'
    'WAIT'
    'PASC'
    'SUM'
    'WAPA'
    'MEAD'
    'LOON'
    'WRD'
    'VAN'
    'CHE'
    'NFRA'
    'CHI'
    'TUK'
    'THS'
    'WEN'
    'NTN'
    'ORO'
    'THO'
    'GF'
    'VALY'
    'THL'
    'FIF'
    'EVAL'
    'ENDI'
    'KNT'
    'DPRK'
    'COFX'
    'MAR'
    'WV'
    'YEL'
    'NAS'
    'LKW'
    'SNO'
    'OH'
    'ALMI'
    'EAT'
    'SS'
    'KELR'
    'WISH'
    'SAT'
    'OVL'
    'SK'
    'SSID'
    'STAR'
    'HLND'
    'BEL'
    'COLV'
    'EVA'
    'COLT'
    'OCB'
    'SKY'
    'COLP'
    'EVG'
    'CRB'
    'EMT'
    'ST'
    'TOU'
    'FINL'
    'COLH'
    'CRE'
    'SKM'
    'CRK'
    'KAL'
    'COLB'
    'GRNO'
    'WDL'
    'HOC'
    'GRGR'
    'PULL'
    '00'
    'WLC'
    'NTH'
    'CEN'
    'WVAL'
    'MNS'
    'KLIC'
    'PTA'
    'NES'
    'GARF'
    'MARW'
    'ORIE'
    'REAR'
    'PE'
    'PI'
    'TUM'
    'BICK'
    'GRP'
    'SHW'
    'DIXI'
    'ED'
    'LAC'
    'QNC'
    'ENM'
    'CSC'
    'GRF'
    'QUI'
    'BLN'
    'ENT'
    'GRC'
    'WTUC'
    'EV'
    'SHL'
    'RAY'
    'STBU'
    'QTS'
    'GLEN'
    'NOO'
    'ANA'
    'MOS'
    'MOR'
    'DAYT'
    'CRES'
    'KENN'
    'HGL'
    'MEDL'
    'MOT'
    'OKA'
    'EVGR'
    'SPOK'
    'MON'
    'IND'
    'TAC'
    'BTH'
    'LCH'
    'MABT'
    'WSAL'
    'COS'
    'TEKO'
    'UGAP'
    'STJO'
    'ISS'
    'REPU'
    'SUL'
    'WHT'
    'ZILA'
    'MTB'
    'DAVE'
    'VDR'
    'REN'
    'BENG'
    'LIBR'
    'CURL'
    'HARR'
    'MUK'
    'CON'
    'TSK'
    'LYLE'
    'NK'
    'NM'
    'SEQ'
    'ONCR'
    'ROC'
    'ASOT'
    'DGR'
    'RID'
    'SEA'
    'NBC'
    'OLY'
    'CLAR'
    'LKD'
    'CK'
    'FED'
    'AUB'
    'CLH'
    'WHR'
    'ELM'
    'NAVY'
    'CLE'
    'SRI'
    'WLU'
    'FRN'
    'FREE'
    'RITZ'
    'POME'
    'TOUC'
    'ROOS'
    'ORCH'
    'GRVW'
    'TOPP'
    'CLP'
    'RICH'
    'SVS'
    'GMT'
    'OMA'
    'KEL'
    'QUT'
    'BRW'
    'WIN'
    'ORT'
    'ODES'
    'KION'
    'KAHL'
    'MET'
    'BRM'
    'BRL'
    'WIS'
    'PUY'
    'BRI'
    'MER'
    'BRG'
    'SB'
    'OTHR'
    'ORC'
    'PRES'
    'SWI'
    'UNP'
    'PATS'
    'TOL'
    'GOLD'
    'CAS'
    'PROS'
    'PEN'
    'OCO'
    'SELA'
    'SAN'
    'STEP'
    'MK'
    'CAM'
    'HC'
    'ELN'
    'NEWP'
    'LPZ'
    'SUMM'
    'LC'
    'DAM'
    'ONA'
    'WELL'
    'YAKI'
    'STH'
    'LS'
    'DAR'
    'INCH'
    'EAS'
    'BIS'
    'CWY'
    'STE'
    'WAH'
    'MLA'
    'AD'
    'EYAK'
    'MTAD'
    'MLK'
    'MTP'
    'MTV'
    'STV'
    'KTS'
    'TEN'
    'ABR'
    'AR'
    'NMFS'
    'FPS'
    'HOQ'
    'CUSI'
    'TROU'
    'SDW'
    'SELK'
    'MCC'
    'LAMO'
    'OAKS'
    'MSF'
    'ROSA'
    'SPRA'
    'VSH'
    'LGV'
    'NRV'
    'WYAK'
]


def get_all_listings(username, password, property_types=PROPERTY_TYPES):
    return get_new_listings(username, password, hours_previous=876581, property_types=property_types)


def get_all_active_mls_numbers(username, password, property_types=PROPERTY_TYPES, areas=AREAS):
    begin_date = "1990-01-01T00:00:00"
    end_date = "3000-01-01T00:00:00"

    for property_type in property_types:
        for area in areas:
            for row in execute_listing_query(username, password, 'RetrieveListingData', {'BeginDate': begin_date, 'EndDate': end_date, 'MLS': 'nwmls', 'PropertyType': property_type, 'Area': area 'Status': 'A'}, filter="LN,ST"):
                info = dict([(c.tag.replace('{http://www.nwmls.com/Schemas/Standard/StandardXML1_2.xsd}', ''), c.text) for c in row.getchildren()])
                if info.get('ST') == 'A':
                    yield info.get('LN')


def get_new_listings(username, password, hours_previous=24, property_types=PROPERTY_TYPES):
    begin_date = (datetime.datetime.utcnow() - datetime.timedelta(hours=hours_previous)).strftime('%Y-%m-%dT%H:%M:%S')
    end_date = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S')

    for property_type in property_types:
        for row in execute_listing_query(username, password, 'RetrieveListingData', {'BeginDate': begin_date, 'EndDate': end_date, 'MLS': 'nwmls', 'PropertyType': property_type}):
            out = dict([(c.tag.replace('{http://www.nwmls.com/Schemas/Standard/StandardXML1_2.xsd}', ''), c.text) for c in row.getchildren()])
            yield look_up_all_fields(username, password, out)


def get_photos(username, password, listing_id):
    for row in execute_photo_query(username, password, listing_id):
        out = dict([(c.tag.replace('{NWMLS:EverNet:ImageData:1.0}', ''), c.text) for c in row.getchildren()])
        out['BLOB'] = base64.b64decode(out['BLOB'])
        yield out
